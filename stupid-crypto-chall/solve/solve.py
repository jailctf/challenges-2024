N = 624
M = 397

mt_init = [19650218, 2194844435, 874550967, 1417962806, 719805879, 2188372024, 721660136, 1814940559, 2833403150, 3889680837, 1003665704, 1330738387, 2892331238, 3489052161, 3855278296, 3311200630, 1422571577, 2585306665, 2882769417, 2783805802, 4207719964, 2400416080, 2341377904, 2590753297, 3924081815, 1211472509, 3057012486, 3436335279, 551149560, 1318655221, 1900533858, 3537525294, 2107812065, 3148644481, 594136785, 1814262168, 1224061569, 653651109, 254650943, 2832785922, 3699583528, 2088609312, 3529585711, 41492871, 2876012911, 4240588078, 1402615791, 1934126869, 3096545044, 2890863071, 80499043, 970921794, 3007610686, 750866145, 799115259, 3629971774, 2864380489, 3888374480, 2087741561, 3146346387, 3269762417, 2727485495, 2488668711, 2964190680, 2116659522, 4141458096, 3537107937, 3667677805, 2429248426, 2452306317, 3015982257, 499957222, 2360410630, 4194693085, 147288288, 3359074475, 1635136148, 4073107990, 3628367767, 3898116531, 275612352, 2842514961, 3115851985, 3103448722, 302309156, 22171017, 2075519075, 3671007489, 3949991970, 1963601502, 4167967445, 804406473, 1055110313, 3894654986, 2278780139, 34711884, 4121261916, 3468881884, 2287991389, 393453278, 548699130, 1499706375, 332872900, 1556864443, 1043137738, 4174970395, 1614747618, 669116410, 1897615374, 3255278936, 1370736725, 1550777747, 1685794058, 1862314184, 2400528575, 2672900100, 1647333586, 3524644532, 1765506473, 2857335743, 3636393737, 2932986219, 1203228647, 1628511289, 3647085204, 2987412752, 2905279128, 2631768385, 4014428911, 1727529885, 1124854030, 2262104686, 2499713312, 2421398767, 4134715143, 2358935835, 1002066021, 340444514, 3268366900, 1112268606, 1897974631, 3331577291, 2922602614, 3423543891, 1267030560, 2344564886, 1942259446, 3179572998, 1573187880, 1205933762, 3025229445, 4246102746, 346693941, 2002220930, 1829519945, 3309743875, 1904872348, 955816590, 2796353700, 668528669, 2648785169, 2704726048, 893089804, 738773343, 2832484895, 2050343702, 104744889, 3439545764, 980222603, 422274176, 3865519914, 2026267864, 539814729, 4137805178, 1140607595, 2537690753, 3971218783, 1931293181, 3089667358, 1133695167, 399772074, 3682192071, 4293649418, 1029228868, 3902327948, 1974090788, 3344730195, 2795804747, 3396216457, 366677807, 416687433, 930072460, 901228284, 1521860141, 3484259358, 478803252, 3138556488, 4137898487, 3807832586, 3773310804, 3221624091, 3076008769, 4156878137, 406561453, 3897607181, 623564883, 2247148685, 1696011322, 2911604503, 3979653402, 742342831, 3881512158, 2282092805, 2681274264, 3681829528, 46152446, 3126539534, 3635632789, 1012335624, 3686064131, 2587648220, 2008745587, 2556071384, 1788453345, 861781568, 2727104545, 758340017, 1880693944, 2136364769, 1370367813, 798286522, 506003017, 2520802485, 2991500316, 3489134272, 3275208410, 1640252809, 3797759893, 4271912220, 3111882026, 140581304, 2568658569, 2686841033, 3059852298, 293994524, 1890650113, 1797269750, 3428669802, 1401714789, 2643788909, 3727894469, 2833360921, 1622853283, 3832221927, 277065458, 3711010937, 4192871202, 3356722694, 680496635, 2574997514, 1476265004, 3232676806, 3318710975, 4210635059, 4159903992, 2116300560, 2532158399, 718792604, 2539969944, 3164133583, 2649636591, 2200349072, 2851998122, 670873689, 2613796143, 3562264788, 1174445287, 1149173203, 2225964784, 4266377361, 3119455410, 1518371465, 1816545474, 2516586762, 240910660, 2681595121, 1301176317, 3127753611, 862342957, 771183330, 438085196, 1046497567, 922186079, 1222939296, 51184555, 1757804190, 426665187, 2730510776, 2573705612, 1312406577, 667742236, 3239950393, 2582034960, 3759737929, 1601926242, 2947737408, 975540284, 1285948639, 3761027786, 1226457986, 34782949, 2916146832, 142734034, 569716755, 4042990521, 3947471773, 1575951506, 3517313596, 3100986137, 2199197158, 3376719924, 4087139828, 3705107125, 1482533137, 1541227668, 1678953742, 2056318769, 3045003063, 1622629937, 487578169, 4137196231, 3764647071, 2241527512, 2558474063, 1038354351, 2094837850, 2481932343, 3229539130, 3756851151, 1006180559, 4181103103, 3565909441, 2371373280, 1493415041, 160348120, 1285104017, 3595587370, 4264242568, 1161124915, 2042766103, 737713932, 3481808155, 478389208, 1300643225, 1007986266, 1168231653, 3652705112, 2909421388, 3924670764, 1731016690, 4084014919, 4205099837, 1373900512, 2937538864, 2730075174, 957417377, 3258199283, 87174175, 792789163, 2527971304, 2716998340, 3091367825, 97659251, 1782441684, 919015551, 735476370, 87326482, 926205331, 1888657273, 3715638227, 1715499660, 1922410526, 4175228089, 1525608673, 3578587616, 2042086160, 3730509879, 3607443975, 3879209240, 3652717612, 2372597521, 3471943430, 2765853569, 3643232056, 3297105617, 2692883557, 1805942063, 1394934451, 3337180104, 1181922214, 2331394419, 306465830, 3736887952, 1729663122, 3390355091, 2379159653, 3851731257, 4021176185, 1079541434, 433656928, 1831627642, 2892512290, 4063025724, 406246264, 1293199350, 1120564498, 3926678815, 1350089133, 4273098366, 3385122292, 993379095, 725502136, 25504318, 752278045, 3729298457, 2392480235, 2657233815, 320925812, 2950230896, 989728679, 506301841, 1404204260, 1413065993, 865242585, 866785615, 1859142878, 589268143, 775553472, 1410495094, 1607063978, 3888932143, 704411669, 3513884419, 3370826939, 2896358996, 439226283, 2352722741, 1626809714, 246502175, 189424636, 1337937966, 3719088974, 4178799653, 2794717891, 1831166187, 1862432793, 2263235392, 3847861459, 802662362, 3621709005, 2634319122, 3245216029, 1466421412, 1528864744, 349292989, 3152395874, 3374677426, 2279952808, 1238578150, 107682552, 913857966, 3747681661, 3560958606, 3617063034, 1988620951, 1854864649, 1862999556, 2962654934, 1498851202, 2003448718, 2942754891, 798789550, 3882536840, 3338815162, 3066948065, 2057094004, 4171611151, 4284063395, 2325690120, 2659914459, 165909127, 2783186990, 2161504072, 343671839, 2751150377, 3621950182, 222528329, 3219381950, 238911006, 2710753737, 2982111755, 1115859074, 156211365, 228231184, 2302165064, 933165355, 4181545713, 2201173365, 291303663, 19134280, 3581811046, 68817880, 1037069880, 2445243929, 2507869609, 1468655994, 2646143627, 2709652242, 559859542, 2657856757, 248278651, 656698256, 2682159578, 3542996035, 2775252812, 1761180115, 3646714856, 2330951878, 834843492, 3951905925, 744286448, 3621804227, 2822882772, 1168938371, 3349647456, 672527398, 1163635478, 3445281068, 722448549, 3543924788, 2823456463, 1931863550, 2483173049, 4148604134, 3081487737, 2916138664, 940193076, 4142650279, 2563327448, 3737140007, 2407111514, 243557343, 1657192483, 3995730323, 1012445178, 2365602253, 2830079959, 2287658550, 2893719730, 2373631903, 4215513121, 189686171, 2003138393, 3410898923, 1020530876, 1103312993, 1976606742, 899447370, 1949555562, 3167671920, 595304244, 1919198655, 2929333298, 619161901, 623498751, 2063591130, 763251111, 4291719204, 3951567013, 2998385089, 758818611, 1375945828, 2510752543, 4188334520, 121785359, 3225750324, 1354685949, 1643999927, 911976986, 518523023, 3993561529, 2326708913, 336174575, 853096604, 2873283550, 4022490143, 3010604384, 2080594943, 1702902668, 3360749048, 4184957279, 2421794725, 4155016765, 3104188113, 1576615579, 604774175, 2739462297, 4096823942, 1932918233, 1779286169, 2544260698, 1430072091, 2196303270, 4237199385, 2613550760, 1481676153, 2920297152, 2463881971, 1098865791, 2939219489, 2494804283, 3108728554, 1635052534, 2905164258]

def untemper(x):
    x ^= x >> 18
    x ^= (x << 15) & 0xefc60000
    x ^= ((x << 7) & 0x9d2c5680) ^ ((x << 14) & 0x94284000) ^ ((x << 21) & 0x14200000) ^ ((x << 28) & 0x10000000)
    x ^= (x >> 11) ^ (x >> 22)
    return x

def reverse_phase1(mt):
    mt[0] = mt_init[0]
    key = [0] * keylen
    for i in range(1, keylen + 1):
        j = i - 1
        key[j] = (mt[i] - j - (mt_init[i] ^ 1664525 * (mt[i - 1] ^ mt[i - 1] >> 30))) & 0xffffffff
    return key

def reverse_phase2(mt):
    mt0 = [0] * N
    mt0[1] = mt[1]
    for i in range(2, keylen):
        mt0[i] = ((mt[i] + i) ^ 1566083941 * (mt[i - 1] ^ mt[i - 1] >> 30)) & 0xffffffff
    return mt0

def untwist(mt):
    mt0 = [0] * N
    for i in range(2 * codesize - 1):
        mt0[i] = mt0[i + 1] = 0x80000000
        x = (mt0[i] & 0x80000000) | (mt0[i + 1] & 0x7fffffff)
        mt0[i + M] = mt[i] ^ (x >> 1) ^ (0x9908b0df * (x & 1))
    return mt0

def phase1(key):
    mt = mt_init.copy()
    for i in range(1, N):
        j = (i - 1) % keylen
        mt[i] = ((mt[i] ^ (mt[i - 1] ^ mt[i - 1] >> 30) * 1664525) + key[j] + j) & 0xffffffff
    j = (N - 1) % len(key)
    mt[1] = ((mt[1] ^ (mt[N - 1] ^ mt[N - 1] >> 30) * 1664525) + key[j] + j) & 0xffffffff
    return mt

def phase2(mt):
    mt = mt.copy()
    for i in range(2, N):
        mt[i] = ((mt[i] ^ (mt[i - 1] ^ mt[i - 1] >> 30) * 1566083941) - i) & 0xffffffff
    mt[1] = ((mt[1] ^ (mt[N - 1] ^ mt[N - 1] >> 30) * 1566083941) - 1) & 0xffffffff
    mt[0] = 0x80000000
    return mt

def twist(mt):
    for i in range(N):
        y = (mt[i] & 0x80000000) | (mt[(i + 1) % N] & 0x7fffffff)
        mt[i] = mt[(i + M) % N] ^ (y >> 1) ^ 0x9908b0df * (y & 1)
    return mt

def crack_seed(code):
    chars = ''.join(map(chr, range(32, 127))) + '\n'
    target = [chars.index(c) for c in code]

    global codesize, keylen
    codesize = len(code)
    keylen = M + 2 * codesize - 1

    mt = [0] * N
    for i in range(codesize):
        val = int(target[i] * 9007199254740992.0 / (67108864.0 * 96) + 1) << 5
        mt[2 * i] = untemper(val)
        mt[2 * i + 1] = 0

    mt_phase2 = untwist(mt)
    mt_phase1 = reverse_phase2(mt_phase2)
    key = reverse_phase1(mt_phase1)

    mt0 = mt_init.copy()
    for i in range(1, N):
        j = (i - 1) % keylen
        mt0[i] = ((mt0[i] ^ 1664525 * (mt0[i - 1] ^ mt0[i - 1] >> 30)) + key[j] + j) & 0xffffffff

    mt1 = mt0.copy()
    for i in range(2, N):
        mt1[i] = ((mt1[i] ^ 1566083941 * (mt1[i - 1] ^ mt1[i - 1] >> 30)) - i) & 0xffffffff

    L = (N - 1) % keylen

    # Step 1: Let C be the corrected value of mt[N - 1] after Phase 1 such that the last twist
    #         of Phase 2 does nothing.
    C = ((mt_phase2[1] + 1 ^ mt_phase2[1]) * 1786162797) & 0xffffffff
    C ^= C >> 30
    C = ((C + N - 1) ^ 1566083941 * (mt1[N - 2] ^ mt1[N - 2] >> 30)) & 0xffffffff

    # Step 2: Update key[L - 1] such that mt[N - 1] = C after Phase 1.
    key[L - 1] = (C - (L - 1) - (mt_init[N - 1] ^ 1664525 * (mt0[N - 2] ^ mt0[N - 2] >> 30))) & 0xffffffff

    # Step 3: Since mt[N - 1] and mt[L] share the same key[L - 1], update mt[L] accordingly.
    mt0[L] = ((mt_init[L] ^ 1664525 * (mt0[L - 1] ^ mt0[L - 1] >> 30)) + key[L - 1] + (L - 1)) & 0xffffffff

    # Step 4: Update key[L] such that the last twist of Phase 1 does nothing.
    key[L] = (mt0[1] - L - (mt0[1] ^ 1664525 * (C ^ C >> 30))) & 0xffffffff

    # Step 5: Since key[L] has changed, update mt[L + 1] accordingly.
    mt0[L + 1] = ((mt_init[L + 1] ^ 1664525 * (mt0[L] ^ mt0[L] >> 30)) + key[L] + L) & 0xffffffff

    # Step 6: Recompute the new values of mt[L] and mt[L + 1] after Phase 2, respectively.
    mt_phase2_L = ((mt0[L] ^ 1566083941 * (mt_phase2[L - 1] ^ mt_phase2[L - 1] >> 30)) - L) & 0xffffffff
    mt_phase2_L1 = ((mt0[L + 1] ^ 1566083941 * (mt_phase2_L ^ mt_phase2_L >> 30)) - (L + 1)) & 0xffffffff

    # Step 7: Determine what value mt[L + 2] must be after Phase 1 so that it's value equals
    #         what it originally was after Phase 2.
    mt_phase1_L2 = ((mt_phase2[L + 2] + (L + 2)) ^ 1566083941 * (mt_phase2_L1 ^ mt_phase2_L1 >> 30)) & 0xffffffff

    # Step 8: Update key[L + 1] so that mt[L + 2] = mt_phase1_L2 after Phase 1.
    key[L + 1] = (mt_phase1_L2 - (L + 1) - (mt_init[L + 2] ^ 1664525 * (mt0[L + 1] ^ mt0[L + 1] >> 30))) & 0xffffffff

    # Step 9: Since key[L + 1] has changed, update mt[L + 2] accordingly.
    mt0[L + 2] = ((mt_init[L + 2] ^ 1664525 * (mt0[L + 1] ^ mt0[L + 1] >> 30)) + key[L + 1] + (L + 1)) & 0xffffffff

    # Step 10: Update key[L + 2] so that mt[L + 3] equals what it originally was after Phase 1.
    key[L + 2] = (mt0[L + 3] - (L + 2) - (mt_init[L + 3] ^ 1664525 * (mt0[L + 2] ^ mt0[L + 2] >> 30))) & 0xffffffff

    seed = 0
    for i in range(keylen):
        seed |= key[i] << (32 * i)
    print(f'{len(target)}#breakpoint()', hex(seed))

if __name__ == '__main__':
    crack_seed('eval(a[3:])')